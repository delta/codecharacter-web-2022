/* tslint:disable */
/* eslint-disable */
/**
 * CodeCharacter API
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2022.0.1
 * Contact: delta@nitt.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { LeaderboardEntry } from '../models';

export interface GetLeaderboardRequest {
  page?: number;
  size?: number;
}

/**
 * LeaderboardApi - interface
 *
 * @export
 * @interface LeaderboardApiInterface
 */
export interface LeaderboardApiInterface {
  /**
   * Get leaderboard
   * @summary Get leaderboard
   * @param {number} [page] Index of the page
   * @param {number} [size] Size of the page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApiInterface
   */
  getLeaderboardRaw(
    requestParameters: GetLeaderboardRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<LeaderboardEntry>>>;

  /**
   * Get leaderboard
   * Get leaderboard
   */
  getLeaderboard(
    page?: number,
    size?: number,
    initOverrides?: RequestInit,
  ): Promise<Array<LeaderboardEntry>>;
}

/**
 *
 */
export class LeaderboardApi
  extends runtime.BaseAPI
  implements LeaderboardApiInterface
{
  /**
   * Get leaderboard
   * Get leaderboard
   */
  async getLeaderboardRaw(
    requestParameters: GetLeaderboardRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<LeaderboardEntry>>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/leaderboard`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Get leaderboard
   * Get leaderboard
   */
  async getLeaderboard(
    page?: number,
    size?: number,
    initOverrides?: RequestInit,
  ): Promise<Array<LeaderboardEntry>> {
    const response = await this.getLeaderboardRaw(
      { page: page, size: size },
      initOverrides,
    );
    return await response.value();
  }
}
