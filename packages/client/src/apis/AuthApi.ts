/* tslint:disable */
/* eslint-disable */
/**
 * CodeCharacter API
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2022.0.1
 * Contact: delta@nitt.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ExternalLoginRequest,
  ForgotPasswordRequest,
  GenericError,
  PasswordLoginRequest,
  PasswordLoginResponse,
  ResetPasswordRequest,
} from '../models';

export interface ExternalLoginOperationRequest {
  externalLoginRequest: ExternalLoginRequest;
}

export interface ForgotPasswordOperationRequest {
  forgotPasswordRequest: ForgotPasswordRequest;
}

export interface PasswordLoginOperationRequest {
  passwordLoginRequest: PasswordLoginRequest;
}

export interface ResetPasswordOperationRequest {
  resetPasswordRequest: ResetPasswordRequest;
}

/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
  /**
   * Redirect to challenge for the given external login provider
   * @summary External Login
   * @param {ExternalLoginRequest} externalLoginRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  externalLoginRaw(
    requestParameters: ExternalLoginOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Redirect to challenge for the given external login provider
   * External Login
   */
  externalLogin(
    externalLoginRequest: ExternalLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;

  /**
   * Request password reset email to be sent when user forgot their password
   * @summary Forgot password
   * @param {ForgotPasswordRequest} forgotPasswordRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  forgotPasswordRaw(
    requestParameters: ForgotPasswordOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Request password reset email to be sent when user forgot their password
   * Forgot password
   */
  forgotPassword(
    forgotPasswordRequest: ForgotPasswordRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;

  /**
   * Login with email and password and get bearer token for authentication
   * @summary Password Login
   * @param {PasswordLoginRequest} passwordLoginRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  passwordLoginRaw(
    requestParameters: PasswordLoginOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PasswordLoginResponse>>;

  /**
   * Login with email and password and get bearer token for authentication
   * Password Login
   */
  passwordLogin(
    passwordLoginRequest: PasswordLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<PasswordLoginResponse>;

  /**
   * Reset password using the token from password reset email
   * @summary Reset password
   * @param {ResetPasswordRequest} resetPasswordRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  resetPasswordRaw(
    requestParameters: ResetPasswordOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Reset password using the token from password reset email
   * Reset password
   */
  resetPassword(
    resetPasswordRequest: ResetPasswordRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
  /**
   * Redirect to challenge for the given external login provider
   * External Login
   */
  async externalLoginRaw(
    requestParameters: ExternalLoginOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.externalLoginRequest === null ||
      requestParameters.externalLoginRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'externalLoginRequest',
        'Required parameter requestParameters.externalLoginRequest was null or undefined when calling externalLogin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/login/external`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.externalLoginRequest,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Redirect to challenge for the given external login provider
   * External Login
   */
  async externalLogin(
    externalLoginRequest: ExternalLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.externalLoginRaw(
      { externalLoginRequest: externalLoginRequest },
      initOverrides,
    );
  }

  /**
   * Request password reset email to be sent when user forgot their password
   * Forgot password
   */
  async forgotPasswordRaw(
    requestParameters: ForgotPasswordOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.forgotPasswordRequest === null ||
      requestParameters.forgotPasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'forgotPasswordRequest',
        'Required parameter requestParameters.forgotPasswordRequest was null or undefined when calling forgotPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/forgot-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.forgotPasswordRequest,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Request password reset email to be sent when user forgot their password
   * Forgot password
   */
  async forgotPassword(
    forgotPasswordRequest: ForgotPasswordRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.forgotPasswordRaw(
      { forgotPasswordRequest: forgotPasswordRequest },
      initOverrides,
    );
  }

  /**
   * Login with email and password and get bearer token for authentication
   * Password Login
   */
  async passwordLoginRaw(
    requestParameters: PasswordLoginOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PasswordLoginResponse>> {
    if (
      requestParameters.passwordLoginRequest === null ||
      requestParameters.passwordLoginRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'passwordLoginRequest',
        'Required parameter requestParameters.passwordLoginRequest was null or undefined when calling passwordLogin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/login/password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.passwordLoginRequest,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Login with email and password and get bearer token for authentication
   * Password Login
   */
  async passwordLogin(
    passwordLoginRequest: PasswordLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<PasswordLoginResponse> {
    const response = await this.passwordLoginRaw(
      { passwordLoginRequest: passwordLoginRequest },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Reset password using the token from password reset email
   * Reset password
   */
  async resetPasswordRaw(
    requestParameters: ResetPasswordOperationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resetPasswordRequest === null ||
      requestParameters.resetPasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'resetPasswordRequest',
        'Required parameter requestParameters.resetPasswordRequest was null or undefined when calling resetPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/reset-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.resetPasswordRequest,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Reset password using the token from password reset email
   * Reset password
   */
  async resetPassword(
    resetPasswordRequest: ResetPasswordRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.resetPasswordRaw(
      { resetPasswordRequest: resetPasswordRequest },
      initOverrides,
    );
  }
}
